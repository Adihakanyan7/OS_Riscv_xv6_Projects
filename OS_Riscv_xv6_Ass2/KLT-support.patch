diff --git a/Makefile b/Makefile
index 39a99d7..72a0b7e 100644
--- a/Makefile
+++ b/Makefile
@@ -13,6 +13,7 @@ OBJS = \
   $K/main.o \
   $K/vm.o \
   $K/proc.o \
+  $K/kthread.o \
   $K/swtch.o \
   $K/trampoline.o \
   $K/trap.o \
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..0d01958 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -107,6 +107,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// kthread.c
+void                kthreadinit(struct proc *);
+struct kthread*     mykthread();
+
+// TODO: delte this after you are done with task 2.2
+void allocproc_help_function(struct proc *p);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..4dce1ff 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -30,6 +30,7 @@ exec(char *path, char **argv)
   struct proghdr ph;
   pagetable_t pagetable = 0, oldpagetable;
   struct proc *p = myproc();
+  struct kthread *kt = mykthread();
 
   begin_op();
 
@@ -73,6 +74,7 @@ exec(char *path, char **argv)
   ip = 0;
 
   p = myproc();
+  kt = mykthread();
   uint64 oldsz = p->sz;
 
   // Allocate two pages at the next page boundary.
@@ -112,7 +114,7 @@ exec(char *path, char **argv)
   // arguments to user main(argc, argv)
   // argc is returned via the system call return
   // value, which goes in a0.
-  p->trapframe->a1 = sp;
+  kt->trapframe->a1 = sp;
 
   // Save program name for debugging.
   for(last=s=path; *s; s++)
@@ -124,8 +126,8 @@ exec(char *path, char **argv)
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
   p->sz = sz;
-  p->trapframe->epc = elf.entry;  // initial program counter = main
-  p->trapframe->sp = sp; // initial stack pointer
+  kt->trapframe->epc = elf.entry;  // initial program counter = main
+  kt->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
diff --git a/kernel/kthread.c b/kernel/kthread.c
new file mode 100644
index 0000000..8612146
--- /dev/null
+++ b/kernel/kthread.c
@@ -0,0 +1,38 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "defs.h"
+
+extern struct proc proc[NPROC];
+
+void kthreadinit(struct proc *p)
+{
+
+  for (struct kthread *kt = p->kthread; kt < &p->kthread[NKT]; kt++)
+  {
+
+    // WARNING: Don't change this line!
+    // get the pointer to the kernel stack of the kthread
+    kt->kstack = KSTACK((int)((p - proc) * NKT + (kt - p->kthread)));
+  }
+}
+
+struct kthread *mykthread()
+{
+  return &myproc()->kthread[0];
+}
+
+struct trapframe *get_kthread_trapframe(struct proc *p, struct kthread *kt)
+{
+  return p->base_trapframes + ((int)(kt - p->kthread));
+}
+
+// TODO: delte this after you are done with task 2.2
+void allocproc_help_function(struct proc *p) {
+  p->kthread->trapframe = get_kthread_trapframe(p, p->kthread);
+
+  p->context.sp = p->kthread->kstack + PGSIZE;
+}
\ No newline at end of file
diff --git a/kernel/kthread.h b/kernel/kthread.h
new file mode 100644
index 0000000..1f9d8a7
--- /dev/null
+++ b/kernel/kthread.h
@@ -0,0 +1,59 @@
+
+// per-process data for the trap handling code in trampoline.S.
+// sits in a page by itself just under the trampoline page in the
+// user page table. not specially mapped in the kernel page table.
+// uservec in trampoline.S saves user registers in the trapframe,
+// then initializes registers from the trapframe's
+// kernel_sp, kernel_hartid, kernel_satp, and jumps to kernel_trap.
+// usertrapret() and userret in trampoline.S set up
+// the trapframe's kernel_*, restore user registers from the
+// trapframe, switch to the user page table, and enter user space.
+// the trapframe includes callee-saved user registers like s0-s11 because the
+// return-to-user path via usertrapret() doesn't return through
+// the entire kernel call stack.
+struct trapframe {
+  /*   0 */ uint64 kernel_satp;   // kernel page table
+  /*   8 */ uint64 kernel_sp;     // top of process's kernel stack
+  /*  16 */ uint64 kernel_trap;   // usertrap()
+  /*  24 */ uint64 epc;           // saved user program counter
+  /*  32 */ uint64 kernel_hartid; // saved kernel tp
+  /*  40 */ uint64 ra;
+  /*  48 */ uint64 sp;
+  /*  56 */ uint64 gp;
+  /*  64 */ uint64 tp;
+  /*  72 */ uint64 t0;
+  /*  80 */ uint64 t1;
+  /*  88 */ uint64 t2;
+  /*  96 */ uint64 s0;
+  /* 104 */ uint64 s1;
+  /* 112 */ uint64 a0;
+  /* 120 */ uint64 a1;
+  /* 128 */ uint64 a2;
+  /* 136 */ uint64 a3;
+  /* 144 */ uint64 a4;
+  /* 152 */ uint64 a5;
+  /* 160 */ uint64 a6;
+  /* 168 */ uint64 a7;
+  /* 176 */ uint64 s2;
+  /* 184 */ uint64 s3;
+  /* 192 */ uint64 s4;
+  /* 200 */ uint64 s5;
+  /* 208 */ uint64 s6;
+  /* 216 */ uint64 s7;
+  /* 224 */ uint64 s8;
+  /* 232 */ uint64 s9;
+  /* 240 */ uint64 s10;
+  /* 248 */ uint64 s11;
+  /* 256 */ uint64 t3;
+  /* 264 */ uint64 t4;
+  /* 272 */ uint64 t5;
+  /* 280 */ uint64 t6;
+};
+
+struct kthread
+{
+
+  uint64 kstack;                // Virtual address of kernel stack
+
+  struct trapframe *trapframe;  // data page for trampoline.S
+};
\ No newline at end of file
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 776f98c..df5ea6d 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -62,6 +62,6 @@
 //   fixed-size stack
 //   expandable heap
 //   ...
-//   TRAPFRAME (p->trapframe, used by the trampoline)
+//   TRAPFRAME (kt->trapframe, used by the trampoline)
 //   TRAMPOLINE (the same page as in the kernel)
-#define TRAPFRAME (TRAMPOLINE - PGSIZE)
+#define TRAPFRAME(kt_idx) (TRAMPOLINE - PGSIZE + (kt_idx * sizeof(struct trapframe)))
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..da87669 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,4 +1,5 @@
 #define NPROC        64  // maximum number of processes
+#define NKT           1  // maximum number of kernel threads
 #define NCPU          8  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..eb52f80 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -35,11 +35,13 @@ proc_mapstacks(pagetable_t kpgtbl)
   struct proc *p;
   
   for(p = proc; p < &proc[NPROC]; p++) {
-    char *pa = kalloc();
-    if(pa == 0)
-      panic("kalloc");
-    uint64 va = KSTACK((int) (p - proc));
-    kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+    for (struct kthread *kt = p->kthread; kt < &p->kthread[NKT]; kt++) {
+      char *pa = kalloc();
+      if(pa == 0)
+        panic("kalloc");
+      uint64 va = KSTACK((int) ((p - proc) * NKT + (kt - p->kthread)));
+      kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+    }
   }
 }
 
@@ -54,7 +56,7 @@ procinit(void)
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->state = UNUSED;
-      p->kstack = KSTACK((int) (p - proc));
+      kthreadinit(p);
   }
 }
 
@@ -126,7 +128,7 @@ found:
   p->state = USED;
 
   // Allocate a trapframe page.
-  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+  if((p->base_trapframes = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -140,12 +142,16 @@ found:
     return 0;
   }
 
+
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+
+  // TODO: delte this after you are done with task 2.2
+  allocproc_help_function(p);
   return p;
 }
 
@@ -155,9 +161,9 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if(p->trapframe)
-    kfree((void*)p->trapframe);
-  p->trapframe = 0;
+  if(p->base_trapframes)
+    kfree((void*)p->base_trapframes);
+  p->base_trapframes = 0;
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
@@ -195,8 +201,8 @@ proc_pagetable(struct proc *p)
 
   // map the trapframe page just below the trampoline page, for
   // trampoline.S.
-  if(mappages(pagetable, TRAPFRAME, PGSIZE,
-              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
+  if(mappages(pagetable, TRAPFRAME(0), PGSIZE,
+              (uint64)(p->base_trapframes), PTE_R | PTE_W) < 0){
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
     uvmfree(pagetable, 0);
     return 0;
@@ -211,7 +217,7 @@ void
 proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME(0), 1, 0);
   uvmfree(pagetable, sz);
 }
 
@@ -243,8 +249,8 @@ userinit(void)
   p->sz = PGSIZE;
 
   // prepare for the very first "return" from kernel to user.
-  p->trapframe->epc = 0;      // user program counter
-  p->trapframe->sp = PGSIZE;  // user stack pointer
+  p->kthread[0].trapframe->epc = 0;      // user program counter
+  p->kthread[0].trapframe->sp = PGSIZE;  // user stack pointer
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -282,6 +288,7 @@ fork(void)
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
+  struct kthread *kt = mykthread();
 
   // Allocate process.
   if((np = allocproc()) == 0){
@@ -297,10 +304,10 @@ fork(void)
   np->sz = p->sz;
 
   // copy saved user registers.
-  *(np->trapframe) = *(p->trapframe);
+  *(np->kthread[0].trapframe) = *(kt->trapframe);
 
   // Cause fork to return 0 in the child.
-  np->trapframe->a0 = 0;
+  np->kthread[0].trapframe->a0 = 0;
 
   // increment reference counts on open file descriptors.
   for(i = 0; i < NOFILE; i++)
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..ce73438 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,3 +1,5 @@
+#include "kthread.h"
+
 // Saved registers for kernel context switches.
 struct context {
   uint64 ra;
@@ -28,57 +30,6 @@ struct cpu {
 
 extern struct cpu cpus[NCPU];
 
-// per-process data for the trap handling code in trampoline.S.
-// sits in a page by itself just under the trampoline page in the
-// user page table. not specially mapped in the kernel page table.
-// uservec in trampoline.S saves user registers in the trapframe,
-// then initializes registers from the trapframe's
-// kernel_sp, kernel_hartid, kernel_satp, and jumps to kernel_trap.
-// usertrapret() and userret in trampoline.S set up
-// the trapframe's kernel_*, restore user registers from the
-// trapframe, switch to the user page table, and enter user space.
-// the trapframe includes callee-saved user registers like s0-s11 because the
-// return-to-user path via usertrapret() doesn't return through
-// the entire kernel call stack.
-struct trapframe {
-  /*   0 */ uint64 kernel_satp;   // kernel page table
-  /*   8 */ uint64 kernel_sp;     // top of process's kernel stack
-  /*  16 */ uint64 kernel_trap;   // usertrap()
-  /*  24 */ uint64 epc;           // saved user program counter
-  /*  32 */ uint64 kernel_hartid; // saved kernel tp
-  /*  40 */ uint64 ra;
-  /*  48 */ uint64 sp;
-  /*  56 */ uint64 gp;
-  /*  64 */ uint64 tp;
-  /*  72 */ uint64 t0;
-  /*  80 */ uint64 t1;
-  /*  88 */ uint64 t2;
-  /*  96 */ uint64 s0;
-  /* 104 */ uint64 s1;
-  /* 112 */ uint64 a0;
-  /* 120 */ uint64 a1;
-  /* 128 */ uint64 a2;
-  /* 136 */ uint64 a3;
-  /* 144 */ uint64 a4;
-  /* 152 */ uint64 a5;
-  /* 160 */ uint64 a6;
-  /* 168 */ uint64 a7;
-  /* 176 */ uint64 s2;
-  /* 184 */ uint64 s3;
-  /* 192 */ uint64 s4;
-  /* 200 */ uint64 s5;
-  /* 208 */ uint64 s6;
-  /* 216 */ uint64 s7;
-  /* 224 */ uint64 s8;
-  /* 232 */ uint64 s9;
-  /* 240 */ uint64 s10;
-  /* 248 */ uint64 s11;
-  /* 256 */ uint64 t3;
-  /* 264 */ uint64 t4;
-  /* 272 */ uint64 t5;
-  /* 280 */ uint64 t6;
-};
-
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
 // Per-process state
@@ -92,6 +43,9 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
+  struct kthread kthread[NKT];        // kthread group table
+  struct trapframe *base_trapframes;  // data page for trampolines
+
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
@@ -99,7 +53,6 @@ struct proc {
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
-  struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..c67f252 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -33,20 +33,20 @@ fetchstr(uint64 addr, char *buf, int max)
 static uint64
 argraw(int n)
 {
-  struct proc *p = myproc();
+  struct kthread* kt = mykthread();
   switch (n) {
   case 0:
-    return p->trapframe->a0;
+    return kt->trapframe->a0;
   case 1:
-    return p->trapframe->a1;
+    return kt->trapframe->a1;
   case 2:
-    return p->trapframe->a2;
+    return kt->trapframe->a2;
   case 3:
-    return p->trapframe->a3;
+    return kt->trapframe->a3;
   case 4:
-    return p->trapframe->a4;
+    return kt->trapframe->a4;
   case 5:
-    return p->trapframe->a5;
+    return kt->trapframe->a5;
   }
   panic("argraw");
   return -1;
@@ -133,15 +133,16 @@ syscall(void)
 {
   int num;
   struct proc *p = myproc();
+  struct kthread *kt = mykthread();
 
-  num = p->trapframe->a7;
+  num = kt->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
-    p->trapframe->a0 = syscalls[num]();
+    kt->trapframe->a0 = syscalls[num]();
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
-    p->trapframe->a0 = -1;
+    kt->trapframe->a0 = -1;
   }
 }
diff --git a/kernel/trampoline.S b/kernel/trampoline.S
index d7308cc..fb3a9e2 100644
--- a/kernel/trampoline.S
+++ b/kernel/trampoline.S
@@ -25,15 +25,13 @@ uservec:
         # in supervisor mode, but with a
         # user page table.
         #
-
-        # save user a0 in sscratch so
-        # a0 can be used to get at TRAPFRAME.
-        csrw sscratch, a0
-
-        # each process has a separate p->trapframe memory area,
-        # but it's mapped to the same virtual address
-        # (TRAPFRAME) in every process's user page table.
-        li a0, TRAPFRAME
+        # sscratch points to where the process's kt->trapframe is
+        # mapped into user space, at TRAPFRAME.
+        #
+        
+	# swap a0 and sscratch
+        # so that a0 is TRAPFRAME
+        csrrw a0, sscratch, a0
         
         # save the user registers in TRAPFRAME
         sd ra, 40(a0)
@@ -67,21 +65,21 @@ uservec:
         sd t5, 272(a0)
         sd t6, 280(a0)
 
-	# save the user a0 in p->trapframe->a0
+	# save the user a0 in kt->trapframe->a0
         csrr t0, sscratch
         sd t0, 112(a0)
 
-        # initialize kernel stack pointer, from p->trapframe->kernel_sp
+        # initialize kernel stack pointer, from kt->trapframe->kernel_sp
         ld sp, 8(a0)
 
-        # make tp hold the current hartid, from p->trapframe->kernel_hartid
+        # make tp hold the current hartid, from kt->trapframe->kernel_hartid
         ld tp, 32(a0)
 
-        # load the address of usertrap(), from p->trapframe->kernel_trap
+        # load the address of usertrap(), from kt->trapframe->kernel_trap
         ld t0, 16(a0)
 
 
-        # fetch the kernel page table address, from p->trapframe->kernel_satp.
+        # fetch the kernel page table address, from kt->trapframe->kernel_satp.
         ld t1, 0(a0)
 
         # wait for any previous memory operations to complete, so that
@@ -99,17 +97,20 @@ uservec:
 
 .globl userret
 userret:
-        # userret(pagetable)
-        # called by usertrapret() in trap.c to
+        # userret(TRAPFRAME, pagetable)
         # switch from kernel to user.
-        # a0: user page table, for satp.
+        # usertrapret() calls here.
+        # a0: TRAPFRAME, in user page table.
+        # a1: user page table, for satp.
 
         # switch to the user page table.
-        sfence.vma zero, zero
-        csrw satp, a0
+        csrw satp, a1
         sfence.vma zero, zero
 
-        li a0, TRAPFRAME
+        # put the saved user a0 in sscratch, so we
+        # can swap it with our a0 (TRAPFRAME) in the last step.
+        ld t0, 112(a0)
+        csrw sscratch, t0
 
         # restore all but a0 from TRAPFRAME
         ld ra, 40(a0)
@@ -143,8 +144,8 @@ userret:
         ld t5, 272(a0)
         ld t6, 280(a0)
 
-	# restore user a0
-        ld a0, 112(a0)
+	# restore user a0, and save TRAPFRAME in sscratch
+        csrrw a0, sscratch, a0
         
         # return to user mode and user pc.
         # usertrapret() set up sstatus and sepc.
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..791a07a 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -46,9 +46,9 @@ usertrap(void)
   w_stvec((uint64)kernelvec);
 
   struct proc *p = myproc();
-  
+  struct kthread *kt = mykthread();
   // save user program counter.
-  p->trapframe->epc = r_sepc();
+  kt->trapframe->epc = r_sepc();
   
   if(r_scause() == 8){
     // system call
@@ -58,7 +58,7 @@ usertrap(void)
 
     // sepc points to the ecall instruction,
     // but we want to return to the next instruction.
-    p->trapframe->epc += 4;
+    kt->trapframe->epc += 4;
 
     // an interrupt will change sepc, scause, and sstatus,
     // so enable only now that we're done with those registers.
@@ -90,6 +90,7 @@ void
 usertrapret(void)
 {
   struct proc *p = myproc();
+  struct kthread *kt = mykthread();
 
   // we're about to switch the destination of traps from
   // kerneltrap() to usertrap(), so turn off interrupts until
@@ -102,10 +103,10 @@ usertrapret(void)
 
   // set up trapframe values that uservec will need when
   // the process next traps into the kernel.
-  p->trapframe->kernel_satp = r_satp();         // kernel page table
-  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
-  p->trapframe->kernel_trap = (uint64)usertrap;
-  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
+  kt->trapframe->kernel_satp = r_satp();         // kernel page table
+  kt->trapframe->kernel_sp = kt->kstack + PGSIZE; // process's kernel stack
+  kt->trapframe->kernel_trap = (uint64)usertrap;
+  kt->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
 
   // set up the registers that trampoline.S's sret will use
   // to get to user space.
@@ -117,7 +118,7 @@ usertrapret(void)
   w_sstatus(x);
 
   // set S Exception Program Counter to the saved user pc.
-  w_sepc(p->trapframe->epc);
+  w_sepc(kt->trapframe->epc);
 
   // tell trampoline.S the user page table to switch to.
   uint64 satp = MAKE_SATP(p->pagetable);
@@ -126,7 +127,7 @@ usertrapret(void)
   // switches to the user page table, restores user registers,
   // and switches to user mode with sret.
   uint64 trampoline_userret = TRAMPOLINE + (userret - trampoline);
-  ((void (*)(uint64))trampoline_userret)(satp);
+  ((void (*)(uint64, uint64))trampoline_userret)(TRAPFRAME((uint)(kt - p->kthread)), satp);
 }
 
 // interrupts and exceptions from kernel code go here via kernelvec,
